name: Android CI/CD

on:
  push:
    branches: [ main, 'devin/*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        app: [frontend-customer, frontend-staff]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: '${{ matrix.app }}/package-lock.json'
        
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      
    - name: Install dependencies
      run: |
        cd ${{ matrix.app }}
        npm ci
        
    - name: Build web app
      run: |
        cd ${{ matrix.app }}
        npm run build
        
    - name: Sync with Capacitor
      run: |
        cd ${{ matrix.app }}
        npx cap sync android
        
    - name: Decode keystore
      run: |
        echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 -d > ${{ matrix.app }}/android/app/keystore.jks
        ls -la ${{ matrix.app }}/android/app/keystore.jks
        
    - name: Validate keystore
      run: |
        cd ${{ matrix.app }}/android
        echo "üîç Validating keystore credentials..."
        if ! keytool -list -keystore app/keystore.jks -storepass ${{ secrets.ANDROID_KEYSTORE_PASSWORD }} -alias ${{ secrets.KEY_ALIAS }} > /dev/null 2>&1; then
          echo "‚ùå Keystore validation failed. Possible issues:"
          echo "  - Incorrect ANDROID_KEYSTORE_PASSWORD"
          echo "  - Incorrect KEY_ALIAS (expected: yourchoiceice-key)"
          echo "  - Corrupted keystore file"
          echo "üîç Available aliases in keystore:"
          keytool -list -keystore app/keystore.jks -storepass ${{ secrets.ANDROID_KEYSTORE_PASSWORD }} || echo "Cannot list keystore contents"
          exit 1
        fi
        echo "‚úÖ Keystore validation successful"
      env:
        KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
        
    - name: Verify Keystore Path
      run: |
        if [ ! -f "${{ matrix.app }}/android/app/keystore.jks" ]; then
          echo "::error::Keystore not found at ${{ matrix.app }}/android/app/keystore.jks"
          exit 1
        fi
        echo "‚úÖ Keystore found and accessible"
        
    - name: Build debug APK
      run: |
        cd ${{ matrix.app }}/android
        ./gradlew assembleDebug
        
    - name: Build release APK
      run: |
        cd ${{ matrix.app }}/android
        ./gradlew assembleRelease
      env:
        KEYSTORE_FILE: keystore.jks
        KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
        KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
        KEY_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
        
    - name: Build release AAB
      run: |
        cd ${{ matrix.app }}/android
        ./gradlew bundleRelease
      env:
        KEYSTORE_FILE: keystore.jks
        KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
        KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
        KEY_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
        
    - name: Upload APK artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.app }}-apk
        path: |
          ${{ matrix.app }}/android/app/build/outputs/apk/debug/*.apk
          ${{ matrix.app }}/android/app/build/outputs/apk/release/*.apk
          
    - name: Upload AAB artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.app }}-aab
        path: ${{ matrix.app }}/android/app/build/outputs/bundle/release/*.aab
        
    - name: Inspect Build Artifacts
      run: |
        echo "üì¶ Build artifacts for ${{ matrix.app }}:"
        ls -la ${{ matrix.app }}/android/app/build/outputs/apk/debug/ || echo "No debug APKs found"
        ls -la ${{ matrix.app }}/android/app/build/outputs/apk/release/ || echo "No release APKs found"
        ls -la ${{ matrix.app }}/android/app/build/outputs/bundle/release/ || echo "No release AABs found"
        
    - name: Validate Google Play Service Account JSON
      run: |
        echo "üîç Validating Google Play service account JSON format..."
        
        # Check if secret is base64 encoded (common issue)
        if echo '${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}' | base64 -d > /dev/null 2>&1; then
          echo "‚ö†Ô∏è  WARNING: Secret appears to be base64 encoded - it should be plain text JSON"
          echo "üîÑ Attempting to decode and validate..."
          DECODED_JSON=$(echo '${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}' | base64 -d)
          if ! echo "$DECODED_JSON" | jq empty; then
            echo "‚ùå Invalid JSON format after base64 decode"
            exit 1
          fi
          JSON_CONTENT="$DECODED_JSON"
        else
          # Validate as plain text JSON
          if ! echo '${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}' | jq empty; then
            echo "‚ùå Invalid JSON format in GOOGLE_PLAY_SERVICE_ACCOUNT_JSON"
            exit 1
          fi
          JSON_CONTENT='${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}'
        fi
        
        # Check required fields
        REQUIRED_FIELDS=("type" "project_id" "private_key" "client_email")
        for field in "${REQUIRED_FIELDS[@]}"; do
          if ! echo "$JSON_CONTENT" | jq -e ".$field" > /dev/null; then
            echo "‚ùå Missing required field: $field"
            exit 1
          fi
        done
        
        # Additional validation for common issues
        if echo "$JSON_CONTENT" | jq -r '.private_key' | grep -q '\\n'; then
          echo "‚ö†Ô∏è  WARNING: private_key contains literal \\n instead of actual newlines"
        fi
        
        echo "‚úÖ Service account JSON validation successful"
        
    - name: Fix Google Play Service Account JSON formatting
      id: fix_service_account_json
      run: |
        echo "üîß Fixing Google Play service account JSON formatting..."
        
        # Get the raw JSON content
        RAW_JSON='${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}'
        
        # Check if it's base64 encoded and decode if necessary
        if echo "$RAW_JSON" | base64 -d > /dev/null 2>&1; then
          echo "üìù Decoding base64 encoded service account JSON..."
          DECODED_JSON=$(echo "$RAW_JSON" | base64 -d)
          JSON_CONTENT="$DECODED_JSON"
        else
          JSON_CONTENT="$RAW_JSON"
        fi
        
        # Fix escaped newlines in private_key field
        echo "üîÑ Converting escaped newlines to actual newlines in private_key..."
        FIXED_PRIVATE_KEY=$(echo "$JSON_CONTENT" | jq -r '.private_key' | sed 's/\\n/\n/g')
        
        # Reconstruct the full JSON with the fixed private_key
        FINAL_JSON=$(echo "$JSON_CONTENT" | jq --arg fixed_key "$FIXED_PRIVATE_KEY" '.private_key = $fixed_key')
        
        # Validate the final JSON
        if ! echo "$FINAL_JSON" | jq empty; then
          echo "‚ùå Failed to create valid JSON after formatting fixes"
          exit 1
        fi
        
        # Save to environment file for next step
        echo "FIXED_SERVICE_ACCOUNT_JSON<<EOF" >> $GITHUB_ENV
        echo "$FINAL_JSON" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
        
        echo "‚úÖ Service account JSON formatting fixed successfully"
        
    - name: Deploy to Google Play Store
      uses: r0adkll/upload-google-play@v1.1.3
      env:
        NODE_OPTIONS: "--openssl-legacy-provider"
      with:
        serviceAccountJsonPlainText: ${{ env.FIXED_SERVICE_ACCOUNT_JSON }}
        packageName: com.arcticeicesolutions.${{ matrix.app == 'frontend-customer' && 'customer' || 'staff' }}
        releaseFiles: ${{ matrix.app }}/android/app/build/outputs/bundle/release/*.aab
        track: internal
        status: completed
        inAppUpdatePriority: 2
        whatsNewDirectory: ${{ matrix.app }}/android/whatsnew
        mappingFile: ${{ matrix.app }}/android/app/build/outputs/mapping/release/mapping.txt
