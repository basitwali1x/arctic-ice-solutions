name: CI/CD Pipeline

on:
  pull_request:
    branches: [ main, devin/1752750425-arctic-ice-solutions-initial-commit ]
  push:
    branches: [ main, devin/1752750425-arctic-ice-solutions-initial-commit ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          
      - name: Install frontend dependencies
        run: |
          cd frontend
          pnpm install
          
      - name: Lint frontend
        run: |
          cd frontend
          pnpm lint
          
      - name: Build frontend
        run: |
          cd frontend
          pnpm build
          
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          
      - name: Install Poetry
        run: pip install poetry
        
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake
          
      - name: Install backend dependencies
        if: ${{ secrets.GOOGLE_MAPS_API_KEY != '' }}
        env:
          GOOGLE_MAPS_API_KEY: ${{ secrets.GOOGLE_MAPS_API_KEY }}
        run: |
          cd backend
          poetry install --no-interaction --no-ansi
          
      - name: Skip backend dependencies
        if: ${{ secrets.GOOGLE_MAPS_API_KEY == '' }}
        run: echo "⚠️ GOOGLE_MAPS_API_KEY secret not configured. Backend dependencies installation skipped."
          
  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/devin/1752750425-arctic-ice-solutions-initial-commit')) || (github.event_name == 'pull_request' && (github.base_ref == 'main' || github.base_ref == 'devin/1752750425-arctic-ice-solutions-initial-commit'))
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup SSH Deploy Key
        if: ${{ secrets.DEPLOY_KEY_PRIVATE != '' }}
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.DEPLOY_KEY_PRIVATE }}
          
      - name: Check Deploy Key Configuration
        if: ${{ secrets.DEPLOY_KEY_PRIVATE == '' }}
        run: echo "⚠️ DEPLOY_KEY_PRIVATE secret not configured. SSH authentication will not be available."
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          
      - name: Build frontend for production
        env:
          VITE_API_URL: https://app-rawyclbe.fly.dev
          VITE_GOOGLE_MAPS_API_KEY: ${{ secrets.GOOGLE_MAPS_API_KEY || '' }}
        run: |
          cd frontend
          pnpm install
          pnpm build
          
      - name: Force Environment Update
        env:
          VITE_API_URL: https://app-rawyclbe.fly.dev
          VITE_GOOGLE_MAPS_API_KEY: ${{ secrets.GOOGLE_MAPS_API_KEY || '' }}
        run: |
          node force-env-update.js
          
      - name: Verify Build Configuration
        run: |
          echo "Checking built assets for correct backend URL..."
          if [ -f "frontend/dist/env-config.js" ]; then
            echo "env-config.js contents:"
            cat frontend/dist/env-config.js
          fi
          if [ -f "frontend/dist/runtime-config.js" ]; then
            echo "runtime-config.js exists"
          fi
          echo "✅ Build configuration verification completed"
          
      - name: Deploy to Production (Main Branch Only)
        if: github.ref == 'refs/heads/devin/1752750425-arctic-ice-solutions-initial-commit'
        env:
          DEVIN_SECRET_KEY: ${{ secrets.DEVIN_SECRET_KEY }}
          GOOGLE_MAPS_API_KEY: ${{ secrets.GOOGLE_MAPS_API_KEY }}
        run: |
          echo "Deploying to Devin Apps Platform production..."
          
          # Verify build artifacts exist and contain latest changes
          if [ ! -d "frontend/dist" ]; then
            echo "Error: frontend/dist directory not found"
            exit 1
          fi
          
          if [ -z "$(ls -A frontend/dist)" ]; then
            echo "Error: frontend/dist directory is empty"
            exit 1
          fi
          
          echo "Build verification:"
          ls -la frontend/dist/
          echo "Build hash: $(shasum frontend/dist/index.html)"
          
          # Deploy to Devin Apps Platform
          cd frontend
          
          # Install Devin CLI
          npm install -g @devin/cli@latest
          
          # Authenticate with Devin Platform
          devin auth login --api-key $DEVIN_SECRET_KEY
          
          # Deploy frontend build
          devin apps deploy \
            --app-id ice-management-app-4r16aafs \
            --environment production \
            --directory ./dist \
            --force-rebuild \
            --no-rollback
          
          # Verify deployment status
          DEPLOYMENT_ID=$(devin apps last-deployment --app-id ice-management-app-4r16aafs --json | jq -r '.id')
          devin apps wait-for-deployment --id $DEPLOYMENT_ID --timeout 300
          
          echo "✅ Deployment completed to Devin Apps Platform"
          echo "Production URL: https://arcticicesolutions.com"
          echo "AI routing features should now be live"
          
      - name: Deploy Preview (PR Branches)
        if: github.ref != 'refs/heads/devin/1752750425-arctic-ice-solutions-initial-commit'
        env:
          DEVIN_SECRET_KEY: ${{ secrets.DEVIN_SECRET_KEY }}
          GOOGLE_MAPS_API_KEY: ${{ secrets.GOOGLE_MAPS_API_KEY }}
        run: |
          echo "Deploying PR preview to Devin Apps Platform..."
          
          # Check if dist directory exists and has content
          if [ ! -d "frontend/dist" ]; then
            echo "Error: frontend/dist directory not found"
            exit 1
          fi
          
          if [ -z "$(ls -A frontend/dist)" ]; then
            echo "Error: frontend/dist directory is empty"
            exit 1
          fi
          
          # Deploy preview to Devin Apps Platform
          cd frontend
          
          # Install Devin CLI
          npm install -g @devin/cli@latest
          
          # Authenticate with Devin Platform
          devin auth login --api-key $DEVIN_SECRET_KEY
          
          # Deploy preview build
          devin apps deploy \
            --app-id ice-management-app-4r16aafs \
            --environment preview \
            --directory ./dist \
            --force-rebuild
          
          echo "✅ Preview deployment completed"
          echo "Preview URL available in Devin Apps Platform dashboard"
          
      - name: Deploy Backend to Fly.io
        if: ${{ secrets.FLY_API_TOKEN != '' }}
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          echo "Deploying backend to Fly.io..."
          
          # Install flyctl if not available
          curl -L https://fly.io/install.sh | sh
          export FLYCTL_INSTALL="/home/runner/.fly"
          export PATH="$FLYCTL_INSTALL/bin:$PATH"
          
          # Deploy to Fly.io
          cd backend
          flyctl deploy --remote-only
          
          echo "Backend deployment completed successfully"
          echo "Backend API should be accessible at: https://app-rawyclbe.fly.dev"
          
      - name: Check Backend Deployment Configuration
        if: ${{ secrets.FLY_API_TOKEN == '' }}
        run: echo "⚠️ FLY_API_TOKEN secret not configured. Backend deployment skipped."
