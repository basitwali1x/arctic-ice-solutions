name: CI/CD Pipeline

on:
  pull_request:
    branches: [ main, devin/1752750425-arctic-ice-solutions-initial-commit ]
  push:
    branches: [ main, devin/1752750425-arctic-ice-solutions-initial-commit ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          
      - name: Install frontend dependencies
        run: |
          cd frontend
          pnpm install
          
      - name: Lint frontend
        run: |
          cd frontend
          pnpm lint
          
      - name: Build frontend
        run: |
          cd frontend
          pnpm build
          
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          
      - name: Install Poetry
        run: pip install poetry
        
      - name: Install backend dependencies
        run: |
          cd backend
          poetry install
          
  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/devin/1752750425-arctic-ice-solutions-initial-commit')) || (github.event_name == 'pull_request' && (github.base_ref == 'main' || github.base_ref == 'devin/1752750425-arctic-ice-solutions-initial-commit'))
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup SSH Deploy Key
        if: ${{ secrets.DEPLOY_KEY_PRIVATE != '' }}
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.DEPLOY_KEY_PRIVATE }}
          
      - name: Check Deploy Key Configuration
        if: ${{ secrets.DEPLOY_KEY_PRIVATE == '' }}
        run: echo "⚠️ DEPLOY_KEY_PRIVATE secret not configured. SSH authentication will not be available."
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          
      - name: Build frontend for production
        env:
          VITE_API_URL: https://app-eueptojk.fly.dev
        run: |
          cd frontend
          pnpm install
          pnpm build
          
      - name: Deploy to Vercel (Main Branch Only)
        if: github.ref == 'refs/heads/devin/1752750425-arctic-ice-solutions-initial-commit'
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          echo "Deploying to Vercel production..."
          
          # Verify build artifacts exist and contain latest changes
          if [ ! -d "frontend/dist" ]; then
            echo "Error: frontend/dist directory not found"
            exit 1
          fi
          
          if [ -z "$(ls -A frontend/dist)" ]; then
            echo "Error: frontend/dist directory is empty"
            exit 1
          fi
          
          echo "Build verification:"
          ls -la frontend/dist/
          echo "Build hash: $(shasum frontend/dist/index.html)"
          
          # Install Vercel CLI
          npm install -g vercel@latest
          
          # Deploy to Vercel production
          cd frontend
          echo "Executing deployment to Vercel production..."
          
          # Deploy with production flag
          vercel --prod --token $VERCEL_TOKEN --yes
          
          echo "Vercel deployment completed"
          echo "Production URL should now reflect latest merged changes"
          echo "PR routing accessible at production URL/pr/{pr-number}/dashboard"
          
      - name: Deploy Preview to Vercel (PR Branches)
        if: github.ref != 'refs/heads/devin/1752750425-arctic-ice-solutions-initial-commit'
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          echo "Deploying PR preview to Vercel..."
          
          # Check if dist directory exists and has content
          if [ ! -d "frontend/dist" ]; then
            echo "Error: frontend/dist directory not found"
            exit 1
          fi
          
          if [ -z "$(ls -A frontend/dist)" ]; then
            echo "Error: frontend/dist directory is empty"
            exit 1
          fi
          
          # Install Vercel CLI
          npm install -g vercel@latest
          
          # Deploy preview to Vercel
          cd frontend
          echo "Executing PR preview deployment to Vercel..."
          
          # Deploy preview (non-production)
          vercel --token $VERCEL_TOKEN --yes
          
          echo "Vercel preview deployment completed"
          echo "Preview URL available in Vercel dashboard"
          
      - name: Deploy Backend to Fly.io
        if: ${{ secrets.FLY_API_TOKEN != '' }}
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          echo "Deploying backend to Fly.io..."
          
          # Install flyctl if not available
          curl -L https://fly.io/install.sh | sh
          export FLYCTL_INSTALL="/home/runner/.fly"
          export PATH="$FLYCTL_INSTALL/bin:$PATH"
          
          # Deploy to Fly.io
          cd backend
          flyctl deploy --remote-only
          
          echo "Backend deployment completed successfully"
          echo "Backend API should be accessible at: https://app-rawyclbe.fly.dev"
          
      - name: Check Backend Deployment Configuration
        if: ${{ secrets.FLY_API_TOKEN == '' }}
        run: echo "⚠️ FLY_API_TOKEN secret not configured. Backend deployment skipped."
