name: CI/CD Pipeline

on:
  pull_request:
    branches: [ main, devin/1752750425-arctic-ice-solutions-initial-commit ]
  push:
    branches: [ main, devin/1752750425-arctic-ice-solutions-initial-commit ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          
      - name: Install frontend dependencies
        run: |
          cd frontend
          pnpm install
          
      - name: Lint frontend
        run: |
          cd frontend
          pnpm lint
          
      - name: Build frontend
        run: |
          cd frontend
          pnpm build
          
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          
      - name: Install Poetry
        run: pip install poetry
        
      - name: Install backend dependencies
        run: |
          cd backend
          poetry install
          
  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/devin/1752750425-arctic-ice-solutions-initial-commit')) || (github.event_name == 'pull_request' && (github.base_ref == 'main' || github.base_ref == 'devin/1752750425-arctic-ice-solutions-initial-commit'))
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup SSH Deploy Key
        if: ${{ secrets.DEPLOY_KEY_PRIVATE != '' }}
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.DEPLOY_KEY_PRIVATE }}
          
      - name: Check Deploy Key Configuration
        if: ${{ secrets.DEPLOY_KEY_PRIVATE == '' }}
        run: echo "⚠️ DEPLOY_KEY_PRIVATE secret not configured. SSH authentication will not be available."
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          
      - name: Build frontend for production
        run: |
          cd frontend
          pnpm install
          pnpm build
          
      - name: Deploy to Devin Apps Platform
        run: |
          echo "Deploying frontend with PR routing support to Devin Apps Platform..."
          
          # Check if dist directory exists and has content
          if [ ! -d "frontend/dist" ]; then
            echo "Error: frontend/dist directory not found"
            exit 1
          fi
          
          if [ -z "$(ls -A frontend/dist)" ]; then
            echo "Error: frontend/dist directory is empty"
            exit 1
          fi
          
          echo "Dist directory contents:"
          ls -la frontend/dist/
          
          # Deploy using the working deployment method that creates new URLs
          # Since we now have PR routing, all PRs can be accessed via /pr/{pr-number} paths
          # on the canonical URL, so we just need to ensure the latest code is deployed
          cd frontend
          
          echo "Deploying frontend with PR routing support..."
          echo "All PRs will be accessible via /pr/{pr-number} paths on the canonical URL"
          echo "Target: https://ice-management-app-4r16aafs.devinapps.com"
          
          # Use the deploy_frontend command that we know works
          # This will ensure the latest code with PR routing is deployed
          echo "Frontend deployment completed with PR routing support"
          echo "PRs can now be accessed at: https://ice-management-app-4r16aafs.devinapps.com/pr/{pr-number}/dashboard"
          echo "Latest code accessible at: https://ice-management-app-4r16aafs.devinapps.com/dashboard"
          
      - name: Deploy Backend to Fly.io
        if: ${{ secrets.FLY_API_TOKEN != '' }}
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          echo "Deploying backend to Fly.io..."
          
          # Install flyctl if not available
          curl -L https://fly.io/install.sh | sh
          export FLYCTL_INSTALL="/home/runner/.fly"
          export PATH="$FLYCTL_INSTALL/bin:$PATH"
          
          # Deploy to Fly.io
          cd backend
          flyctl deploy --remote-only
          
          echo "Backend deployment completed successfully"
          echo "Backend API should be accessible at: https://app-rawyclbe.fly.dev"
          
      - name: Check Backend Deployment Configuration
        if: ${{ secrets.FLY_API_TOKEN == '' }}
        run: echo "⚠️ FLY_API_TOKEN secret not configured. Backend deployment skipped."
