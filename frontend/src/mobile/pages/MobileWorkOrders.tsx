import { useState, useEffect } from 'react';
import { Card, CardContent } from '../../components/ui/card';
import { Button } from '../../components/ui/button';
import { Badge } from '../../components/ui/badge';
import { Input } from '../../components/ui/input';
import { Label } from '../../components/ui/label';
import { Textarea } from '../../components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../../components/ui/select';
import { Plus, Wrench, CheckCircle, XCircle, Clock } from 'lucide-react';
import { API_BASE_URL } from '../../lib/constants';
import { WorkOrder, Vehicle } from '../../types/api';

export function MobileWorkOrders() {
  const [workOrders, setWorkOrders] = useState<WorkOrder[]>([]);
  const [vehicles, setVehicles] = useState<Vehicle[]>([]);
  const [showForm, setShowForm] = useState(false);
  const [loading, setLoading] = useState(true);
  const [formData, setFormData] = useState({
    vehicle_id: '',
    vehicle_name: '',
    technician_name: '',
    issue_description: '',
    priority: 'medium',
    work_type: 'mechanical',
    estimated_cost: '',
    estimated_hours: ''
  });

  useEffect(() => {
    fetchData();
  }, []);

  const fetchData = async () => {
    try {
      const [workOrdersResponse, vehiclesResponse] = await Promise.all([
        fetch(`${API_BASE_URL}/api/maintenance/work-orders`),
        fetch(`${API_BASE_URL}/api/vehicles`)
      ]);

      const workOrdersData = await workOrdersResponse.json();
      const vehiclesData = await vehiclesResponse.json();

      setWorkOrders(workOrdersData);
      setVehicles(vehiclesData);
    } catch (error) {
      console.error('Error fetching data:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    try {
      const selectedVehicle = vehicles.find(v => v.id === formData.vehicle_id);
      const workOrderData = {
        id: '', // Will be auto-generated by backend
        vehicle_id: formData.vehicle_id,
        vehicle_name: selectedVehicle ? `${selectedVehicle.license_plate} (${selectedVehicle.vehicle_type})` : '',
        technician_name: formData.technician_name,
        issue_description: formData.issue_description,
        priority: formData.priority,
        status: 'pending',
        work_type: formData.work_type,
        submitted_date: new Date().toISOString(),
        estimated_cost: parseFloat(formData.estimated_cost) || 0,
        estimated_hours: parseFloat(formData.estimated_hours) || 0,
        approved_by: null,
        approved_date: null
      };

      console.log('Submitting work order:', workOrderData);

      const response = await fetch(`${API_BASE_URL}/api/maintenance/work-orders`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(workOrderData),
      });

      if (response.ok) {
        console.log('Work order submitted successfully');
        setShowForm(false);
        setFormData({
          vehicle_id: '',
          vehicle_name: '',
          technician_name: '',
          issue_description: '',
          priority: 'medium',
          work_type: 'mechanical',
          estimated_cost: '',
          estimated_hours: ''
        });
        fetchData();
      } else {
        const errorData = await response.text();
        console.error('Failed to submit work order:', response.status, errorData);
      }
    } catch (error) {
      console.error('Error submitting work order:', error);
    }
  };

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'critical': return 'bg-red-500';
      case 'high': return 'bg-orange-500';
      case 'medium': return 'bg-yellow-500';
      case 'low': return 'bg-green-500';
      default: return 'bg-gray-500';
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'pending': return <Clock className="h-4 w-4 text-orange-500" />;
      case 'approved': return <CheckCircle className="h-4 w-4 text-green-500" />;
      case 'rejected': return <XCircle className="h-4 w-4 text-red-500" />;
      case 'in_progress': return <Wrench className="h-4 w-4 text-blue-500" />;
      case 'completed': return <CheckCircle className="h-4 w-4 text-green-600" />;
      default: return <Clock className="h-4 w-4" />;
    }
  };

  if (loading) {
    return (
      <div className="p-4 space-y-4">
        <div className="animate-pulse space-y-4">
          <div className="h-20 bg-gray-200 rounded-lg"></div>
          <div className="h-20 bg-gray-200 rounded-lg"></div>
          <div className="h-20 bg-gray-200 rounded-lg"></div>
        </div>
      </div>
    );
  }

  if (showForm) {
    return (
      <div className="p-4">
        <div className="flex items-center justify-between mb-4">
          <h2 className="text-xl font-bold">New Work Order</h2>
          <Button variant="outline" size="sm" onClick={() => setShowForm(false)}>
            Cancel
          </Button>
        </div>

        <form onSubmit={handleSubmit} className="space-y-4">
          <div>
            <Label htmlFor="vehicle">Vehicle</Label>
            <Select value={formData.vehicle_id} onValueChange={(value) => setFormData({...formData, vehicle_id: value})}>
              <SelectTrigger>
                <SelectValue placeholder="Select vehicle" />
              </SelectTrigger>
              <SelectContent>
                {vehicles.map((vehicle) => (
                  <SelectItem key={vehicle.id} value={vehicle.id}>
                    {vehicle.license_plate} - {vehicle.vehicle_type}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>

          <div>
            <Label htmlFor="technician">Technician Name</Label>
            <Input
              id="technician"
              value={formData.technician_name}
              onChange={(e) => setFormData({...formData, technician_name: e.target.value})}
              autoComplete="name"
              placeholder="Your name"
              required
            />
          </div>

          <div>
            <Label htmlFor="issue">Issue Description</Label>
            <Textarea
              id="issue"
              value={formData.issue_description}
              onChange={(e) => setFormData({...formData, issue_description: e.target.value})}
              placeholder="Describe the issue..."
              required
              rows={3}
            />
          </div>

          <div className="grid grid-cols-2 gap-4">
            <div>
              <Label htmlFor="priority">Priority</Label>
              <Select value={formData.priority} onValueChange={(value) => setFormData({...formData, priority: value})}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="low">Low</SelectItem>
                  <SelectItem value="medium">Medium</SelectItem>
                  <SelectItem value="high">High</SelectItem>
                  <SelectItem value="critical">Critical</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div>
              <Label htmlFor="work_type">Work Type</Label>
              <Select value={formData.work_type} onValueChange={(value) => setFormData({...formData, work_type: value})}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="mechanical">Mechanical</SelectItem>
                  <SelectItem value="refrigeration">Refrigeration</SelectItem>
                  <SelectItem value="electrical">Electrical</SelectItem>
                  <SelectItem value="body">Body</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>

          <div className="grid grid-cols-2 gap-4">
            <div>
              <Label htmlFor="cost">Estimated Cost ($)</Label>
              <Input
                id="cost"
                type="number"
                step="0.01"
                autoComplete="off"
                value={formData.estimated_cost}
                onChange={(e) => setFormData({...formData, estimated_cost: e.target.value})}
                placeholder="0.00"
              />
            </div>

            <div>
              <Label htmlFor="hours">Estimated Hours</Label>
              <Input
                id="hours"
                type="number"
                step="0.5"
                autoComplete="off"
                value={formData.estimated_hours}
                onChange={(e) => setFormData({...formData, estimated_hours: e.target.value})}
                placeholder="0.0"
              />
            </div>
          </div>

          <Button type="submit" className="w-full">
            Submit Work Order
          </Button>
        </form>
      </div>
    );
  }

  return (
    <div className="p-4 space-y-4">
      <div className="flex items-center justify-between">
        <h2 className="text-xl font-bold">Work Orders</h2>
        <Button size="sm" onClick={() => setShowForm(true)}>
          <Plus className="h-4 w-4 mr-1" />
          New
        </Button>
      </div>

      <div className="space-y-3">
        {workOrders.length === 0 ? (
          <Card>
            <CardContent className="p-6 text-center">
              <Wrench className="h-12 w-12 text-gray-400 mx-auto mb-2" />
              <p className="text-gray-500">No work orders found</p>
            </CardContent>
          </Card>
        ) : (
          workOrders.map((order) => (
            <Card key={order.id}>
              <CardContent className="p-4">
                <div className="flex items-start justify-between mb-2">
                  <div className="flex items-center space-x-2">
                    <Badge className={getPriorityColor(order.priority)}>
                      {order.priority.toUpperCase()}
                    </Badge>
                    <span className="font-medium text-sm">{order.vehicle_name}</span>
                  </div>
                  <div className="flex items-center space-x-1">
                    {getStatusIcon(order.status)}
                    <span className="text-xs text-gray-500 capitalize">{order.status.replace('_', ' ')}</span>
                  </div>
                </div>
                
                <div className="space-y-1 text-sm">
                  <p><strong>Technician:</strong> {order.technician_name}</p>
                  <p><strong>Issue:</strong> {order.issue_description}</p>
                  <p><strong>Type:</strong> {order.work_type}</p>
                  <div className="flex justify-between text-xs text-gray-500 mt-2">
                    <span>Cost: ${order.estimated_cost.toFixed(2)}</span>
                    <span>Hours: {order.estimated_hours}h</span>
                  </div>
                </div>
              </CardContent>
            </Card>
          ))
        )}
      </div>
    </div>
  );
}
